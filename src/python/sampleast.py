import ast

def createSampleV2(rep):
  f1 = ast.File("Class1")
  rep.addFile(f1)
  n1 = ast.Namespace("ConsoleApplication1")
  f1.addNamespace(n1)
  c1 = ast.Cl("Class1")
  n1.addClass(c1)
  s=ast.Type("string［］")
  mod = ast.Modifier()
  mod.access="public"
  m = ast.Method()
  m.name="setState"
  m.setModifiers(mod)
  m.setReturnType(s)
  c1.addMethod(m)
  
  f2 = ast.File("Class2")
  rep.addFile(f2)
  n1 = ast.Namespace("ConsoleApplication1")
  f2.addNamespace(n1)
  c2 = ast.Cl("Class2")
  e1 = ast.Type("Class1")
  c2.setExtend(e1)
  n1.addClass(c2)
  
  f3 = ast.File("Class3")
  rep.addFile(f3)
  n1 = ast.Namespace("ConsoleApplication1")
  f3.addNamespace(n1)
  c3 = ast.Cl("Class3")
  e2 = ast.Type("Class2")
  c3.setExtend(e2)
  n1.addClass(c3)
  
  f4 = ast.File("Class4")
  rep.addFile(f4)
  n1 = ast.Namespace("ConsoleApplication1")
  f4.addNamespace(n1)
  in1 = ast.Namespace("Inner1")
  n1.addNamespace(in1)
  c4 = ast.Cl("Class4")
  e3 = ast.Type("Class3")
  c4.setExtend(e3)
  in1.addClass(c4)

  f5 = ast.File("Class5")
  rep.addFile(f5)
  n1 = ast.Namespace("ConsoleApplication1")
  f5.addNamespace(n1)
  in2 = ast.Namespace("Inner2")
  u1=ast.Using("Inner1")
  in2.addUsing(u1)
  n1.addNamespace(in2)
  c5 = ast.Cl("Class5")
  e4 = ast.Type("Class4")
  c5.setExtend(e4)
  in2.addClass(c5)
  in3 = ast.Namespace("Inner3")
  in2.addNamespace(in3)
  c6 = ast.Cl("Class6")
  e4 = ast.Type("Class4")
  c6.setExtend(e4)
  in3.addClass(c6)
  in4 = ast.Namespace("Inner4")
  in3.addNamespace(in4)
  c7 = ast.Cl("Class7")
  e1 = ast.Type("Class1")
  c7.setExtend(e1)
  in4.addClass(c7)
  
  f6 = ast.File("Class6")
  rep.addFile(f6)
  n1 = ast.Namespace("ConsoleApplication1")
  f6.addNamespace(n1)
  u1=ast.Using("Inner6.Inner7.Inner8")
  n1.addUsing(u1)
  in12 = ast.Namespace("Inner12")
  n1.addNamespace(in12)
  u611=ast.Using("Inner6.Inner7.Inner8.Inner9.Inner10.Inner11")
  in12.addUsing(u611)
  u9=ast.Using("Inner9")
  in12.addUsing(u9)
  c7 = ast.Cl("Class7")
  i1 = ast.Type("Interface1")
  c7.addImplement(i1)
  in12.addClass(c7)
  
  fi1 = ast.File("Interface1")
  rep.addFile(fi1)
  n1 = ast.Namespace("ConsoleApplication1")
  fi1.addNamespace(n1)
  n6 = ast.Namespace("Inner6")
  n1.addNamespace(n6)
  n7 = ast.Namespace("Inner7")
  n6.addNamespace(n7)
  n8 = ast.Namespace("Inner8")
  n7.addNamespace(n8)
  n9 = ast.Namespace("Inner9")
  n8.addNamespace(n9)
  n10 = ast.Namespace("Inner10")
  n9.addNamespace(n10)
  n11 = ast.Namespace("Inner11")
  n10.addNamespace(n11)  
  i1=ast.Iface("Interface1")
  n11.addInterface(i1)
  mod = ast.Modifier()
  mod.access="public"
  m = ast.Method()
  m.name="hello"
  m.setModifiers(mod)
  m.setReturnType(ast.Type("string"))
  i1.addMethod(m)
  
  
    
  f7 = ast.File("Class7")
  rep.addFile(f7)
  n1 = ast.Namespace("ConsoleApplication1")
  f7.addNamespace(n1)
  c8 = ast.Cl("Class8")
  e7 = ast.Type("Inner12.Class7")
  c8.setExtend(e7)
  n1.addClass(c8)
  
  f9 = ast.File("Class9")
  rep.addFile(f9)
  n1 = ast.Namespace("ConsoleApplication1")
  f9.addNamespace(n1)
  n15 = ast.Namespace("Inner15")
  n1.addNamespace(n15)
  n16 = ast.Namespace("Inner16")
  n15.addNamespace(n16)
  c9 = ast.Cl("Class9")
  n16.addClass(c9)
  
  f10 = ast.File("Class10")
  rep.addFile(f10)
  n1 = ast.Namespace("ConsoleApplication1")
  f10.addNamespace(n1)
  n15 = ast.Namespace("Inner15")
  n1.addNamespace(n15)
  

  c10 = ast.Cl("Class10")
  e169 = ast.Type("Inner16.Class9")
  c10.setExtend(e169)
  n15.addClass(c10)
  
  n17 = ast.Namespace("Inner17")
  n15.addNamespace(n17)
  u16=ast.Using("Inner16")
  n17.addUsing(u16)
  c12 = ast.Cl("Class12")
  e9 = ast.Type("Class9")
  c12.setExtend(e9)
  n17.addClass(c12)
  
  n18 = ast.Namespace("Inner18")
  n1.addNamespace(n18)
  u15=ast.Using("Inner15")
  n18.addUsing(u15)
  n19 = ast.Namespace("Inner19")
  n18.addNamespace(n19)
  u1516=ast.Using("Inner15.Inner16")
  n19.addUsing(u1516)
  c12 = ast.Cl("Class12")
  e9 = ast.Type("Class9")
  c12.setExtend(e9)
  n19.addClass(c12)
  
def createSample(rep):
  #rep = Representation()
  intrn = ast.Modifier()
  publ = ast.Modifier()
  publ.setPublic()
  priv = ast.Modifier()
  priv.setPrivate()
  prot = ast.Modifier()
  prot.setProtected()
  void = ast.Type("Void")
  
  basicFunctions = ast.File("BasicFunctions")
  rep.addFile(basicFunctions)
  
  breathing = ast.Namespace("Breathing")
  basicFunctions.addNamespace(breathing)
  
  breath = ast.Iface("Breath")
  breathing.addInterface(breath)
  lungs = ast.Type("Lungs")
  lungsA = ast.Attr("lungs",lungs,priv)
  breath.addAttribute(lungsA)
  respire = ast.Method("respire",void,priv)
  breath.addMethod(respire)

  eating = ast.Namespace("Eating")
  basicFunctions.addNamespace(eating)
  eat = ast.Iface("Eat")
  eating.addInterface(eat)
  mouth = ast.Type("Mouth")
  mouthA = ast.Attr("mouth",mouth,prot)
  energy = ast.Type("Energy")
  consume = ast.Method("consume",energy,priv)
  meal = ast.Type("Meal")
  food = ast.Parameter(meal,"food")
  consume.addParameter(food)
  eat.addMethod(consume)
  eat.addAttribute(mouthA)
  body = ast.Type("Body")
  bodyA = ast.Attr("body",body,prot)
  eat.addAttribute(bodyA)

  
  liveFunctions = ast.File("LiveFunctions")
  rep.addFile(liveFunctions)
  usingBreathing = ast.Using("Breathing")
  liveFunctions.addUsing(usingBreathing)
  usingEating = ast.Using("Eating")
  liveFunctions.addUsing(usingEating)
  living = ast.Namespace("Living")
  
  liveFunctions.addNamespace(living)
  live = ast.Iface("Live")
  living.addInterface(live)
  breathT = ast.Type("Breath")
  eatT = ast.Type("Eat")
  live.addExtend(breathT)
  live.addExtend(eatT)
  exist = ast.Method("exist",void,priv)
  live.addMethod(exist)

  
  biteFile = ast.File("Bite")
  rep.addFile(biteFile)
  biteNamespace = ast.Namespace("Bite")
  biteFile.addNamespace(biteNamespace);
  bite = ast.Iface("Bite")
  biteNamespace.addInterface(bite)
  teeth = ast.Type("Teeth")
  teethA = ast.Attr("teeth",teeth,priv)
  bite.addAttribute(teethA)
  hurt = ast.Type("Hurt")
  attack = ast.Method("attack",hurt,prot)
  attack.isAbstract(True)
  bite.addMethod(attack)

  familiarFile = ast.File("Familiar")
  rep.addFile(familiarFile)
  familiar = ast.Iface("Familiar")
  familarNamespace = ast.Namespace("Familiar")
  familiarFile.addNamespace(familarNamespace)
  familarNamespace.addInterface(familiar)
  cares = ast.Method("cares",void,intrn)
  cares.isAbstract(True)
  familiar.addMethod(cares)

  animalFile = ast.File("Animal")
  rep.addFile(animalFile)
  usingLiving = ast.Using("Living")
  
  animalFile.addUsing(usingLiving)
  animal = ast.Cl("Animal")
  animalFile.addClass(animal)
  bone = ast.Type("Bone")
  boneA = ast.Attr("bone",bone,publ)
  animal.addAttribute(boneA)
  liveT = ast.Type("Live")
  animal.addImplement(liveT)
  move = ast.Method("move",void,prot)
  animal.addMethod(move)
  animal.isAbstract(True)

  
  petFile = ast.File("Pet")
  petNamespace = ast.Namespace("Pet")
  familiarNT = ast.Using("Familiar")
  petNamespace.addUsing(familiarNT)
  petFile.addNamespace(petNamespace)
  rep.addFile(petFile)
  animalT = ast.Type("Animal")
  
  pet = ast.Cl("Pet")
  petNamespace.addClass(pet)
  pet.setExtend(animalT)
  pet.addImplement(familiar)
  pet.isAbstract(True)
  friendliness = ast.Type("Friendliness")
  friendlinessA = ast.Attr("friendliness",friendliness,publ)
  pet.addMethod(cares)
  pet.addAttribute(friendlinessA)

  wildFile = ast.File("Wild")
  wildNamespace = ast.Namespace("Wild")
  wildFile.addNamespace(wildNamespace)
  rep.addFile(wildFile)  
  wild = ast.Cl("Wild")
  wildNamespace.addClass(wild)
  usingBite = ast.Using("Bite")
  wildNamespace.addUsing(usingBite)
  wild.setExtend(animalT)
  biteT = ast.Type("Bite")
  wild.addImplement(biteT)
  wild.isAbstract(True)
  wildness = ast.Type("Wildness")
  wildnessA = ast.Attr("wildness",wildness,publ)
  wild.addAttribute(wildnessA)
  wild.addMethod(attack)

  dogFile = ast.File("Dog")
  rep.addFile(dogFile)
  usingPet = ast.Using("Pet")
  dogFile.addUsing(usingPet)
  dog = ast.Cl("Dog")
  dogFile.addClass(dog)
  petT= ast.Type("Pet")
  dog.setExtend(petT)
  caresImpl = ast.Method("cares",void,intrn)
  dog.addMethod(caresImpl)
  huntCat = ast.Method("huntCat", void, prot)
  catT = ast.Type("Cat")
  catP = ast.Parameter(catT,"cat")
  huntCat.addParameter(catP)
  energyT = ast.Type("Energy")
  energyP = ast.Parameter(energyT,"energy")
  huntCat.addParameter(energyP)
  dog.addMethod(huntCat)

  catFile = ast.File("Cat")
  rep.addFile(catFile)
  usingPetC = ast.Using("Pet")
  catFile.addUsing(usingPetC)
  cat = ast.Cl("Cat")
  catFile.addClass(cat)
  cat.setExtend(petT)
  cat.addMethod(caresImpl)
  mouw = ast.Method("mouw",void,prot)
  cat.addMethod(mouw)

  cowFile = ast.File("Cow")
  rep.addFile(cowFile)
  usingPetCow = ast.Using("Pet")
  cowFile.addUsing(usingPetCow)  
  cow = ast.Cl("Cow")
  cowFile.addClass(cow)
  cow.setExtend(petT)
  milk = ast.Type("Milk")
  milkA = ast.Attr("milk",milk,intrn)
  cow.addAttribute(milkA)
  cow.addMethod(caresImpl)
  giveMilk = ast.Method("giveMilk",milk,publ)
  cow.addMethod(giveMilk)

  tigerFile = ast.File("Tiger")
  rep.addFile(tigerFile)
  usingWild = ast.Using("Wild")
  tigerFile.addUsing(usingWild)
  tiger = ast.Cl("Tiger")
  tigerFile.addClass(tiger)
  wildT = ast.Type("Wild")
  tiger.setExtend(wildT)
  stripe = ast.Type("Stripe")
  stripeA = ast.Attr("stripe",stripe,prot)
  tiger.addAttribute(stripeA)
  attackImpl = ast.Method("attack",hurt,prot)
  tiger.addMethod(attackImpl)

  lionFile = ast.File("Lion")
  rep.addFile(lionFile)
  lionFile.addUsing(usingWild)
  lion = ast.Cl("Lion")
  lionFile.addClass(lion)
  lion.setExtend(wild)
  mane = ast.Type("Mane")
  maneA = ast.Attr("mane",mane,prot)
  lion.addAttribute(maneA)
  lion.addMethod(attackImpl)

def createSampleV1(rep):
  #rep = Representation()
  intrn = Modifier()
  publ = Modifier()
  publ.setPublic()
  priv = Modifier()
  priv.setPrivate()
  prot = Modifier()
  prot.setProtected()
  void = Type("Void")
  
  breath = Iface("Breath")
  lungs = Type("Lungs")
  lungsA = Attr("lungs",lungs,priv)
  breath.addAttribute(lungsA)
  respire=Method("respire",void,priv)
  breath.addMethod(respire)
  rep.addInterface(breath)
  eat = Iface("Eat")
  mouth = Type("Mouth")
  mouthA = Attr("mouth",mouth,prot)
  energy = Type("Energy")
  consume = Method("consume",energy,priv)
  meal = Type("Meal")
  food=Parameter(meal,"food")
  consume.addParameter(food)
  eat.addMethod(consume)
  eat.addAttribute(mouthA)
  rep.addInterface(eat)
  
  live = Iface("Live")
  live.addExtend(breath)
  live.addExtend(eat)
  body = Type("Body")
  bodyA = Attr("body",body,prot)
  eat.addAttribute(bodyA)
  exist=Method("exist",void,priv)
  live.addMethod(exist)
  rep.addInterface(live)
  
  bite = Iface("Bite")
  teeth = Type("Teeth")
  teethA = Attr("teeth",teeth,priv)
  bite.addAttribute(teethA)
  hurt = Type("Hurt")
  attack=Method("attack",hurt,prot)
  attack.isAbstract(True)
  bite.addMethod(attack)
  rep.addInterface(bite)
  familiar = Iface("Familiar")
  cares = Method("cares",void,intrn)
  cares.isAbstract(True)
  familiar.addMethod(cares)
  rep.addInterface(familiar)
  
  animal = Cl("Animal")
  bone = Type("Bone")
  boneA = Attr("bone",bone,publ)
  animal.addAttribute(boneA)
  animal.addImplement(live)
  move = Method("move",void,prot)
  animal.addMethod(move)
  animal.isAbstract(True)
  rep.addClass(animal)
  
  
  pet = Cl("Pet")
  pet.setExtend(animal)
  pet.addImplement(familiar)
  pet.isAbstract(True)
  friendliness = Type("Friendliness")
  friendlinessA = Attr("friendliness",friendliness,publ)
  pet.addMethod(cares)
  pet.addAttribute(friendlinessA)
  rep.addClass(pet)
  
  wild = Cl("Wild")
  wild.setExtend(animal)
  wild.addImplement(bite)
  wild.isAbstract(True)
  wildness = Type("Wildness")
  wildnessA = Attr("wildness",wildness,publ)
  wild.addAttribute(wildnessA)
  wild.addMethod(attack)
  rep.addClass(wild)
  
  dog = Cl("Dog")
  dog.setExtend(pet)
  caresImpl = Method("cares",void,intrn)
  dog.addMethod(caresImpl)
  huntCat = Method("huntCat", void, prot)
  catT = Type("Cat")
  catP=Parameter(catT,"cat")
  huntCat.addParameter(catP)
  energyT = Type("Energy")
  energyP=Parameter(energyT,"energy")
  huntCat.addParameter(energyP)
  dog.addMethod(huntCat)
  rep.addClass(dog)
  
  cat = Cl("Cat")
  cat.setExtend(pet)
  cat.addMethod(caresImpl)
  mouw = Method("mouw",void,prot)
  cat.addMethod(mouw)
  rep.addClass(cat)
  
  cow = Cl("Cow")
  cow.setExtend(pet)
  milk = Type("Milk")
  milkA = Attr("milk",milk,intrn)
  cow.addAttribute(milkA)
  cow.addMethod(caresImpl)
  giveMilk = Method("giveMilk",milk,publ)
  cow.addMethod(giveMilk)
  rep.addClass(cow)
  
  tiger = Cl("Tiger")
  tiger.setExtend(wild)
  stripe = Type("Stripe")
  stripeA = Attr("stripe",stripe,prot)
  tiger.addAttribute(stripeA)
  attackImpl = Method("attack",hurt,prot)
  tiger.addMethod(attackImpl)
  rep.addClass(tiger)
  
  lion = Cl("Lion")
  lion.setExtend(wild)
  mane = Type("Mane")
  maneA = Attr("mane",mane,prot)
  lion.addAttribute(maneA)
  lion.addMethod(attackImpl)
  rep.addClass(lion)
